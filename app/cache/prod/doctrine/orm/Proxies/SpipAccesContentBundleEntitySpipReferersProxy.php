<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SpipAccesContentBundleEntitySpipReferersProxy extends \Spip\AccesContentBundle\Entity\SpipReferers implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getRefererMd5()
    {
        $this->__load();
        return parent::getRefererMd5();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setReferer($referer)
    {
        $this->__load();
        return parent::setReferer($referer);
    }

    public function getReferer()
    {
        $this->__load();
        return parent::getReferer();
    }

    public function setVisites($visites)
    {
        $this->__load();
        return parent::setVisites($visites);
    }

    public function getVisites()
    {
        $this->__load();
        return parent::getVisites();
    }

    public function setVisitesJour($visitesJour)
    {
        $this->__load();
        return parent::setVisitesJour($visitesJour);
    }

    public function getVisitesJour()
    {
        $this->__load();
        return parent::getVisitesJour();
    }

    public function setVisitesVeille($visitesVeille)
    {
        $this->__load();
        return parent::setVisitesVeille($visitesVeille);
    }

    public function getVisitesVeille()
    {
        $this->__load();
        return parent::getVisitesVeille();
    }

    public function setMaj($maj)
    {
        $this->__load();
        return parent::setMaj($maj);
    }

    public function getMaj()
    {
        $this->__load();
        return parent::getMaj();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'refererMd5', 'date', 'referer', 'visites', 'visitesJour', 'visitesVeille', 'maj');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}