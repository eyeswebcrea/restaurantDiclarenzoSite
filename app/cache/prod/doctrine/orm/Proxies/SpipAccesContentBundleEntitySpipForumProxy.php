<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SpipAccesContentBundleEntitySpipForumProxy extends \Spip\AccesContentBundle\Entity\SpipForum implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getIdForum()
    {
        $this->__load();
        return parent::getIdForum();
    }

    public function setIdParent($idParent)
    {
        $this->__load();
        return parent::setIdParent($idParent);
    }

    public function getIdParent()
    {
        $this->__load();
        return parent::getIdParent();
    }

    public function setIdThread($idThread)
    {
        $this->__load();
        return parent::setIdThread($idThread);
    }

    public function getIdThread()
    {
        $this->__load();
        return parent::getIdThread();
    }

    public function setIdRubrique($idRubrique)
    {
        $this->__load();
        return parent::setIdRubrique($idRubrique);
    }

    public function getIdRubrique()
    {
        $this->__load();
        return parent::getIdRubrique();
    }

    public function setIdArticle($idArticle)
    {
        $this->__load();
        return parent::setIdArticle($idArticle);
    }

    public function getIdArticle()
    {
        $this->__load();
        return parent::getIdArticle();
    }

    public function setIdBreve($idBreve)
    {
        $this->__load();
        return parent::setIdBreve($idBreve);
    }

    public function getIdBreve()
    {
        $this->__load();
        return parent::getIdBreve();
    }

    public function setDateHeure($dateHeure)
    {
        $this->__load();
        return parent::setDateHeure($dateHeure);
    }

    public function getDateHeure()
    {
        $this->__load();
        return parent::getDateHeure();
    }

    public function setDateThread($dateThread)
    {
        $this->__load();
        return parent::setDateThread($dateThread);
    }

    public function getDateThread()
    {
        $this->__load();
        return parent::getDateThread();
    }

    public function setTitre($titre)
    {
        $this->__load();
        return parent::setTitre($titre);
    }

    public function getTitre()
    {
        $this->__load();
        return parent::getTitre();
    }

    public function setTexte($texte)
    {
        $this->__load();
        return parent::setTexte($texte);
    }

    public function getTexte()
    {
        $this->__load();
        return parent::getTexte();
    }

    public function setAuteur($auteur)
    {
        $this->__load();
        return parent::setAuteur($auteur);
    }

    public function getAuteur()
    {
        $this->__load();
        return parent::getAuteur();
    }

    public function setEmailAuteur($emailAuteur)
    {
        $this->__load();
        return parent::setEmailAuteur($emailAuteur);
    }

    public function getEmailAuteur()
    {
        $this->__load();
        return parent::getEmailAuteur();
    }

    public function setNomSite($nomSite)
    {
        $this->__load();
        return parent::setNomSite($nomSite);
    }

    public function getNomSite()
    {
        $this->__load();
        return parent::getNomSite();
    }

    public function setUrlSite($urlSite)
    {
        $this->__load();
        return parent::setUrlSite($urlSite);
    }

    public function getUrlSite()
    {
        $this->__load();
        return parent::getUrlSite();
    }

    public function setStatut($statut)
    {
        $this->__load();
        return parent::setStatut($statut);
    }

    public function getStatut()
    {
        $this->__load();
        return parent::getStatut();
    }

    public function setIp($ip)
    {
        $this->__load();
        return parent::setIp($ip);
    }

    public function getIp()
    {
        $this->__load();
        return parent::getIp();
    }

    public function setMaj($maj)
    {
        $this->__load();
        return parent::setMaj($maj);
    }

    public function getMaj()
    {
        $this->__load();
        return parent::getMaj();
    }

    public function setIdAuteur($idAuteur)
    {
        $this->__load();
        return parent::setIdAuteur($idAuteur);
    }

    public function getIdAuteur()
    {
        $this->__load();
        return parent::getIdAuteur();
    }

    public function setIdMessage($idMessage)
    {
        $this->__load();
        return parent::setIdMessage($idMessage);
    }

    public function getIdMessage()
    {
        $this->__load();
        return parent::getIdMessage();
    }

    public function setIdSyndic($idSyndic)
    {
        $this->__load();
        return parent::setIdSyndic($idSyndic);
    }

    public function getIdSyndic()
    {
        $this->__load();
        return parent::getIdSyndic();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'idForum', 'idParent', 'idThread', 'idRubrique', 'idArticle', 'idBreve', 'dateHeure', 'dateThread', 'titre', 'texte', 'auteur', 'emailAuteur', 'nomSite', 'urlSite', 'statut', 'ip', 'maj', 'idAuteur', 'idMessage', 'idSyndic');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}