<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SpipAccesContentBundleEntitySpipGroupesMotsProxy extends \Spip\AccesContentBundle\Entity\SpipGroupesMots implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getIdGroupe()
    {
        $this->__load();
        return parent::getIdGroupe();
    }

    public function setTitre($titre)
    {
        $this->__load();
        return parent::setTitre($titre);
    }

    public function getTitre()
    {
        $this->__load();
        return parent::getTitre();
    }

    public function setDescriptif($descriptif)
    {
        $this->__load();
        return parent::setDescriptif($descriptif);
    }

    public function getDescriptif()
    {
        $this->__load();
        return parent::getDescriptif();
    }

    public function setTexte($texte)
    {
        $this->__load();
        return parent::setTexte($texte);
    }

    public function getTexte()
    {
        $this->__load();
        return parent::getTexte();
    }

    public function setUnseul($unseul)
    {
        $this->__load();
        return parent::setUnseul($unseul);
    }

    public function getUnseul()
    {
        $this->__load();
        return parent::getUnseul();
    }

    public function setObligatoire($obligatoire)
    {
        $this->__load();
        return parent::setObligatoire($obligatoire);
    }

    public function getObligatoire()
    {
        $this->__load();
        return parent::getObligatoire();
    }

    public function setTablesLiees($tablesLiees)
    {
        $this->__load();
        return parent::setTablesLiees($tablesLiees);
    }

    public function getTablesLiees()
    {
        $this->__load();
        return parent::getTablesLiees();
    }

    public function setMinirezo($minirezo)
    {
        $this->__load();
        return parent::setMinirezo($minirezo);
    }

    public function getMinirezo()
    {
        $this->__load();
        return parent::getMinirezo();
    }

    public function setComite($comite)
    {
        $this->__load();
        return parent::setComite($comite);
    }

    public function getComite()
    {
        $this->__load();
        return parent::getComite();
    }

    public function setForum($forum)
    {
        $this->__load();
        return parent::setForum($forum);
    }

    public function getForum()
    {
        $this->__load();
        return parent::getForum();
    }

    public function setMaj($maj)
    {
        $this->__load();
        return parent::setMaj($maj);
    }

    public function getMaj()
    {
        $this->__load();
        return parent::getMaj();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'idGroupe', 'titre', 'descriptif', 'texte', 'unseul', 'obligatoire', 'tablesLiees', 'minirezo', 'comite', 'forum', 'maj');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}