<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SpipAccesContentBundleEntitySpipDocumentsProxy extends \Spip\AccesContentBundle\Entity\SpipDocuments implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getIdDocument()
    {
        $this->__load();
        return parent::getIdDocument();
    }

    public function setIdVignette($idVignette)
    {
        $this->__load();
        return parent::setIdVignette($idVignette);
    }

    public function getIdVignette()
    {
        $this->__load();
        return parent::getIdVignette();
    }

    public function setExtension($extension)
    {
        $this->__load();
        return parent::setExtension($extension);
    }

    public function getExtension()
    {
        $this->__load();
        return parent::getExtension();
    }

    public function setTitre($titre)
    {
        $this->__load();
        return parent::setTitre($titre);
    }

    public function getTitre()
    {
        $this->__load();
        return parent::getTitre();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setDescriptif($descriptif)
    {
        $this->__load();
        return parent::setDescriptif($descriptif);
    }

    public function getDescriptif()
    {
        $this->__load();
        return parent::getDescriptif();
    }

    public function setFichier($fichier)
    {
        $this->__load();
        return parent::setFichier($fichier);
    }

    public function getFichier()
    {
        $this->__load();
        return parent::getFichier();
    }

    public function getpathWebLogo()
    {
        $this->__load();
        return parent::getpathWebLogo();
    }

    public function getPathAbsoluteLocalLogo()
    {
        $this->__load();
        return parent::getPathAbsoluteLocalLogo();
    }

    public function getPathLocalLogo()
    {
        $this->__load();
        return parent::getPathLocalLogo();
    }

    public function setTaille($taille)
    {
        $this->__load();
        return parent::setTaille($taille);
    }

    public function getTaille()
    {
        $this->__load();
        return parent::getTaille();
    }

    public function setLargeur($largeur)
    {
        $this->__load();
        return parent::setLargeur($largeur);
    }

    public function getLargeur()
    {
        $this->__load();
        return parent::getLargeur();
    }

    public function setHauteur($hauteur)
    {
        $this->__load();
        return parent::setHauteur($hauteur);
    }

    public function getHauteur()
    {
        $this->__load();
        return parent::getHauteur();
    }

    public function setMode($mode)
    {
        $this->__load();
        return parent::setMode($mode);
    }

    public function getMode()
    {
        $this->__load();
        return parent::getMode();
    }

    public function setDistant($distant)
    {
        $this->__load();
        return parent::setDistant($distant);
    }

    public function getDistant()
    {
        $this->__load();
        return parent::getDistant();
    }

    public function setMaj($maj)
    {
        $this->__load();
        return parent::setMaj($maj);
    }

    public function getMaj()
    {
        $this->__load();
        return parent::getMaj();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'idDocument', 'idVignette', 'extension', 'titre', 'date', 'descriptif', 'fichier', 'taille', 'largeur', 'hauteur', 'mode', 'distant', 'maj');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}